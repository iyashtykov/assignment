{
	"source": {
		"bloomsObjectiveLevel": "3",
		"grader": "3",
		"guidance": "**Rationale**",
		"initial": "def find_largest(a, b, c):\nif \u003cspan class='jsparson-toggle' data-type='abc'\u003e\u003c/span\u003e \u003e \u003cspan class='jsparson-toggle' data-type='abc'\u003e\u003c/span\u003e:\nif \u003cspan class='jsparson-toggle' data-type='abc'\u003e\u003c/span\u003e \u003e \u003cspan class='jsparson-toggle' data-type='abc'\u003e\u003c/span\u003e:\nreturn \u003cspan class='jsparson-toggle' data-type='abc'\u003e\u003c/span\u003e\nelse:\nreturn \u003cspan class='jsparson-toggle' data-type='abc'\u003e\u003c/span\u003e\nelif \u003cspan class='jsparson-toggle' data-type='abc'\u003e\u003c/span\u003e \u003e \u003cspan class='jsparson-toggle' data-type='abc'\u003e\u003c/span\u003e:\nreturn \u003cspan class='jsparson-toggle' data-type='abc'\u003e\u003c/span\u003e\nelse:\nreturn \u003cspan class='jsparson-toggle' data-type='abc'\u003e\u003c/span\u003e\n            ",
		"instructions": "Construct a function which returns the largest of the three given arguments.\n                  You can change the value of a toggleable element (\u003cspan class=\"jsparson-toggle\"\u003e\u003c/span\u003e) by clicking.",
		"learningObjectives": "learning",
		"maxAttemptsCount": 0,
		"metadata": {
			"files": [],
			"opened": [],
			"tags": [
				{
					"name": "Assessment Type",
					"value": "Parsons Puzzle"
				},
				{
					"name": "Content",
					"value": "parsons"
				},
				{
					"name": "Programming Language",
					"value": "parsons"
				}
			]
		},
		"name": "unit tests grader 1",
		"options": "{\"sortableId\":\"sortable\",\"max_wrong_lines\":10,\"exec_limit\":2500,\"can_indent\":true,\"x_indent\":50,\"lang\":\"en\",\"toggleTypeHandlers\":{\"abc\":[\"a\",\"b\",\"c\"]},\"show_feedback\":true,\"unittests\":\"import unittestparson\\nclass myTests(unittestparson.unittest):\\n  def testOne(self):\\n    self.assertEqual(find_largest(0, 2, 4),4,\\\"Calling function \u003ccode\u003efind_largest(0, 2, 4)\u003c/code\u003e.\\\")\\n    self.assertEqual(find_largest(4, 2, 4),4,\\\"Calling function \u003ccode\u003efind_largest(4, 2, 4)\u003c/code\u003e.\\\")\\n    self.assertEqual(find_largest(-5, -1, -4),-1,\\\"Calling function \u003ccode\u003efind_largest(-5, -1, -4)\u003c/code\u003e.\\\")\\n    self.assertEqual(find_largest(7, 2, 4),7,\\\"Calling function \u003ccode\u003efind_largest(7, 2, 4)\u003c/code\u003e.\\\")\\n_test_result = myTests().main()\"}",
		"points": 100,
		"showGuidanceAfterResponseOption": {
			"type": "Always"
		},
		"showName": true
	},
	"taskId": "parsons-puzzle-2243390891",
	"type": "parsons-puzzle"
}